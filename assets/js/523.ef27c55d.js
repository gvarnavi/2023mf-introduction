"use strict";(self.webpackChunk_2023_mm_presentation=self.webpackChunk_2023_mm_presentation||[]).push([[523],{7688:(e,t,n)=>{function i(e){return e`# Ptychography Helper Functions`}function o(e){return e.html`<hr class="hideable-md">`}function r(e){return e("https://cdn.jsdelivr.net/gh/nicolaspanel/numjs@0.16/dist/numjs.min.js")}function a(e){return e("https://bundle.run/ndarray-ops@1.2.2")}function l(e){return e("https://bundle.run/ndarray-complex@1.0.3")}function s(e,t){return function(n,i){let o=e.zeros(n.shape);return t.atan2(o.selection,n.selection,i.selection),o}}function c(e,t){return function(n,i){let o=e.zeros(n.shape);return t.lts(o.selection,n.selection,i),t.bandseq(o.selection,1),o}}function u(e,t,n){return class i{constructor(t){this.shape=t;let n=t.slice();n.push(2),this.data=e.zeros(n),this._nulls=new Array(t.length).fill(null)}re(){return this.data.pick(...this._nulls,0)}im(){return this.data.pick(...this._nulls,1)}abs(){return e.sqrt(this.abs_sqr())}abs_sqr(){return e.add(this.re().multiply(this.re()),this.im().multiply(this.im()))}angle(){return t(this.im(),this.re())}clone(){let e=new i(this.shape);return e.data=this.data.clone(),e}conjugate(){let t=this.re().clone(),o=this.im().clone();n.conjeq(t.selection,o.selection);let r=new i(this.shape);return r.data=e.stack([t,o],-1),r}multiply(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.muleq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}real_multiply(t){let o=this.re().clone(),r=this.im().clone(),a=t,l=e.zeros(t.shape);n.muleq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}scalar_multiply(t,o){let r=this.re().clone(),a=this.im().clone();n.mulseq(r.selection,a.selection,t,o);let l=new i(this.shape);return l.data=e.stack([r,a],-1),l}add(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.addeq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}subtract(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.subeq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}}}function _(e){return function(t,n){let i=e.zeros(t),o=1/(t*n),r=1+((t-1)/2|0);for(var a=0;a<r;a++)i.set(a,a*o);for(a=r;a<t;a++)i.set(a,(a-t)*o);return i}}function f(e){return function(t,n){let i=[t.size,n.size],o=[];o[0]=e.zeros(i),o[1]=e.zeros(i);for(let e=0;e<i[1];e++)for(let r=0;r<i[0];r++)o[0].set(r,e,t.get(r)),o[1].set(r,e,n.get(e));return o}}function p(e){return function(t){let[n,i]=t.shape,o=n/2|0,r=i/2|0,a=e.zeros([n,i]);return a.slice([null,o],[null,r]).assign(t.slice(-o,-r),!1),a.slice([null,o],r).assign(t.slice(-o,[null,r]),!1),a.slice(-o,-r).assign(t.slice([null,o],[null,r]),!1),a.slice(-o,[null,r]).assign(t.slice([null,o],-r),!1),a}}function v(e,t,n,i){return function(o,r){let[a,l]=o.shape,[s,c]=r,u=new e([a,l]);u.data=t.fft(o.data);let _=n(a,1),f=n(l,1),[p,v]=i(_,f),d=-2*Math.PI,m=t.add(p.multiply(s),v.multiply(c)).multiply(d),b=new e([a,l]),h=t.cos(m),w=t.sin(m);b.data=t.stack([h,w],-1);let g=u.multiply(b);return g.data=t.ifft(g.data),g}}function d(e){return function(t,[n,i]){let o=new e([n,i]),r=n/2|0,a=i/2|0;return o.data.slice([null,r],[null,a],null).assign(t.slice([null,r],[null,a],null),!1),o.data.slice(-r,[null,a],null).assign(t.slice(-r,[null,a],null),!1),o.data.slice([null,r],-a,null).assign(t.slice([null,r],-a,null),!1),o.data.slice(-r,-a,null).assign(t.slice(-r,-a,null),!1),o}}function m(e,t,n){return function(i,o){let[r,a]=i.shape;console.log(r);let l=new e([r,a]);l.data=t.fft(i.data);let[s,c]=[r/o|0,a/o|0],u=n(l.data,[s,c]);return u.data=t.ifft(u.data),u}}function b(){return function(e){let t=9.109383*1e-30,n=1602177e-24,i=299792458;return 662607e-39/Math.sqrt(2*t*n*e)/Math.sqrt(1+n*e/2/t/i/i)*1e11}}function h(e){return function(t){let n=9.109383*1e-30,i=1602177e-24,o=299792458,r=e(t);return 2*Math.PI/r/t*(n*o*o+i*t)/(2*n*o*o+i*t)}}function w(e,t,n,i,o,r,a){return class{constructor(t,n,i,o,r){this._gpts=t.slice(),this._sampling=n.slice(),this._energy=i,this._wavelength=e(i),this._semiangle_cutoff=o,this._defocus=r}_get_scattering_angles(){let e=t(this._gpts[0],this._sampling[0]),r=t(this._gpts[1],this._sampling[1]),[a,l]=n(e,r);return[i.sqrt(i.add(a.multiply(a.multiply(this._wavelength*this._wavelength)),l.multiply(l.multiply(this._wavelength*this._wavelength)))),o(a,l)]}_evaluate_aberrations(e,t){let n=this._defocus/this._wavelength*Math.PI,o=e.multiply(e).multiply(n),a=i.cos(o),l=i.sin(o),s=new r(o.shape);return s.data=i.stack([a,l],-1),s}_evaluate_aperture(e,t){let n=this._semiangle_cutoff/1e3,o=new r(e.shape),l=a(e,n);return o.data=i.stack([l,i.zeros(e.shape)],-1),o}build(){let[e,t]=this._get_scattering_angles(),n=this._evaluate_aberrations(e,t),o=this._evaluate_aperture(e,t),a=n.multiply(o),l=new r(a.shape);l.data=i.ifft(a.data);let s=Math.sqrt(l.abs_sqr().sum());return this._array=l.scalar_multiply(1/s,0),this}}}function g(e,t){const n=e.module();return n.variable(t()).define(["md"],i),n.variable(t()).define(["htl"],o),n.variable(t("nj")).define("nj",["require"],r),n.variable(t("ops")).define("ops",["require"],a),n.variable(t("cops")).define("cops",["require"],l),n.variable(t("atan2")).define("atan2",["nj","ops"],s),n.variable(t("lt_int_s")).define("lt_int_s",["nj","ops"],c),n.variable(t("ComplexNDArray")).define("ComplexNDArray",["nj","atan2","cops"],u),n.variable(t("fftfreq")).define("fftfreq",["nj"],_),n.variable(t("meshgrid2D")).define("meshgrid2D",["nj"],f),n.variable(t("fftshift2D")).define("fftshift2D",["nj"],p),n.variable(t("fourier_shift")).define("fourier_shift",["ComplexNDArray","nj","fftfreq","meshgrid2D"],v),n.variable(t("corner_crop")).define("corner_crop",["ComplexNDArray"],d),n.variable(t("fourier_downsample")).define("fourier_downsample",["ComplexNDArray","nj","corner_crop"],m),n.variable(t("electron_wavelength_angstroms")).define("electron_wavelength_angstroms",b),n.variable(t("electron_interaction_parameter")).define("electron_interaction_parameter",["electron_wavelength_angstroms"],h),n.variable(t("ComplexProbe")).define("ComplexProbe",["electron_wavelength_angstroms","fftfreq","meshgrid2D","nj","atan2","ComplexNDArray","lt_int_s"],w),n}function x(e){return e`# Projection Set Algorithms

Here, we will illustrate another very powerful non-convex optimization strategy used in ptychograghy, called "projection set methods".`}function j(e){return e`## Alternating Projections

Suppose we want to find the solution at the intersection of two sets:
1. a set of all points lying on the red line, and
2. a set of all point lying on the blue line.

Seems simple right? The catch is that we're only allowed to operate on one set at a time. A simple idea could be to take alternating steps where we "project" on one of the sets.

_Note:_ By "project" here we mean finding the closest point between our current location that lies on the set.

Let's try it!`}function y(e){return e.range([50,1e3],{value:250,step:50,label:"Animation speed [ms]"})}function P(e){return e.toggle({label:"Iterate!"})}function k(e,t){return e.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[e.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:9/8,y:9/16,set:1,col:"red"},{x:-.5,y:-1/16,set:2,col:"blue"},{x:9/8,y:9/64,set:2,col:"blue"}],{x:"x",y:"y",z:"set",stroke:"col"}),e.line(t,{stroke:"orange"}),e.dot(t,{fill:"orange",fillOpacity:.5,r:10})]})}function R(e){return e.button("Reset Initial Point")}function z(e){return e`## Non-Convex Sets?

The above example was rather easy, since both our sets were convex. What do you think will happen for non-convex sets? E.g. two disconnected half-lines. Well, our naive alternating projection algorithm will get stuck!`}function A(e){return e.toggle({label:"Iterate!"})}function I(e,t){return e.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[e.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:1/4,y:1/8,set:1,col:"red"},{x:.5,y:1/4,set:2,col:"red"},{x:9/8,y:9/16,set:2,col:"red"},{x:-.5,y:-1/16,set:3,col:"blue"},{x:1/4,y:1/32,set:3,col:"blue"},{x:.5,y:1/16,set:4,col:"blue"},{x:9/8,y:9/64,set:4,col:"blue"}],{x:"x",y:"y",z:"set",stroke:"col"}),e.line(t,{stroke:"orange"}),e.dot(t,{fill:"orange",fillOpacity:.5,r:10})]})}function q(e){return e.button("Reset Initial Point")}function M(e){return e`## Generalized Projections

Turns out, we don't just have to "project" to the set exactly - we can also e.g. reflect about the set to allow for a wide search-space. More generally, we can define a "family" of generalized projection set algorithms according to the iteration:`}function G(e){return e.block`
x_{k+1} \leftarrow \left(1-a-b \right)x_k + a \Pi_1 \left[x_k\right] + b \Pi_2 \left[c \Pi[x_k]+\left(1-c\right)x_k \right]
`}function D(e,t){return t`For scalar parameters ${e`(a,b,c)`}.

Some named choices include:
- Alternating Projections (AP): ${e`(a=0,b=1,c=1)`}
- Difference Map (DM): ${e`(a=-1,b=1,c=2)`}
- Relax Reflect Reflect (RRR): ${e`(a=-\gamma,b=\gamma,c=2)`}
- Relaxed Averaged Alternating Reflections (RAAR): ${e`(a=1-2\gamma,b=\gamma,c=2)`}`}function $(e){return e.radio(["AP","DM","RRR","RAAR","Generalized"],{value:"AP",label:"Projection Name: "})}function C(e,t,n){return e.range([-1,1],{value:`${"Generalized"==t?0:n[t].a}`,step:.001,label:"Projection Parameter a"})}function N(e,t,n){return e.range([0,2],{value:`${"Generalized"==t?1:n[t].b}`,step:.001,label:"Projection Parameter b"})}function S(e,t,n){return e.range([0,2],{value:`${"Generalized"==t?1:n[t].c}`,step:.001,label:"Projection Parameter c"})}function O(e,t){return e.range([0,1],{value:""+("RRR"==t||"RAAR"==t?.875:0),step:.001,label:"Projection Parameter \u03b3"})}function T(e,t){return t`## Multiple Sets

In general, our algorithm above relies on only two generalized projections. When we have more than two sets, we need to reformulate our constraints in the form above. 

A simple way to do this is to apply our projections on a copy of the current iterate separately (${e`\Pi_1`} above), and then average our points together (${e`\Pi_2`} above).`}function W(e){return e.toggle({label:"Iterate!"})}function F(e,t,n){let i=[...Array(e.shape[0])].map(((t,n)=>({x:e.get(n,0),y:e.get(n,1),set:5,col:"green"}))),o=t.map((e=>e.reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]])).map((t=>t/e.length))));return n.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[n.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:1/4,y:1/8,set:1,col:"red"},{x:.5,y:1/4,set:2,col:"red"},{x:9/8,y:9/16,set:2,col:"red"},{x:-.5,y:-1/16,set:3,col:"blue"},{x:1/4,y:1/32,set:3,col:"blue"},{x:.5,y:1/16,set:4,col:"blue"},{x:9/8,y:9/64,set:4,col:"blue"},...i],{x:"x",y:"y",z:"set",stroke:"col"}),n.line(o,{stroke:"orange"}),n.dot(o,{fill:"orange",fillOpacity:.5,r:10})]})}function H(e){return e.button("Reset Initial Point")}function B(e){return e.html`<hr class="hideable-md">`}function E(e){return{AP:{a:0,b:1,c:1},DM:{a:-1,b:1,c:2},RRR:{a:-e,b:e,c:2},RAAR:{a:1-2*e,b:e,c:2}}}function L(e){let t=e.arange(0,2*Math.PI,Math.PI/512),n=[-5/4*Math.cos(Math.PI/8),-5/4*Math.sin(Math.PI/8)],i=e.sin(t.multiply(4)).divide(4).add(1),o=i.multiply(e.cos(t)).subtract(n[0]).divide(3),r=i.multiply(e.sin(t)).subtract(n[1]).divide(3);return e.stack([o,r],-1)}function Z(){return function([e,t]){return[.4*(2*e+t),(2*e+t)/5]}}function J(){return function([e,t]){return[32/65*(2*e+t/4),4/65*(2*e+t/4)]}}function K(){return function([e,t]){if(8*e+4*t>=5||2*e+t<=5/8){let n=(2*e+t)/5;return[2*n,n]}if(15/16<2*e+t&&2*e+t<5/4)return[.5,1/4];if(2*e+t>5/8)return[1/4,1/8];{let n=2*t/5+4*e/5-1/8;return[2*n,n]}}}function Q(){return function([e,t]){if(8*e+t>=65/16||8*e+t<=65/32){let n=(8*e+t)/65;return[8*n,n]}if(195/64<8*e+t&&e+t<65/16)return[.5,1/16];if(8*e+t>=65/32)return[1/4,1/32];{let n=2*t/65+16*e/64-1/32;return[8*n,n]}}}function U(e,t){return function([n,i]){let o=e.add(t.pick(null,0).subtract(n).pow(2),t.pick(null,1).subtract(i).pow(2)).tolist().reduce(((e,t,n,i)=>t>i[e]?e:n),-1);return[t.get(o,0),t.get(o,1)]}}function V(){return function(e,t,[n,i,o]){let r=1-n-i,a=1-o;return function([l,s]){let[c,u]=e([l,s]),[_,f]=t([o*c+a*l,o*u+a*s]);return[r*l+n*c+i*_,r*s+n*u+i*f]}}}function X(){return function(e,t,n){return function([[i,o],[r,a],[l,s]]){return[e([i,o]),t([r,a]),n([l,s])]}}}function Y(){return function([[e,t],[n,i],[o,r]]){let a=(e+n+o)/3,l=(t+i+r)/3;return[[a,l],[a,l],[a,l]]}}function ee(e,t){return function(n,i,o,[r,a,l]){let s=1-r-a,c=1-l,u=e(n,i,o),_=t;return function([[e,t],[n,i],[o,f]]){let[[p,v],[d,m],[b,h]]=u([[e,t],[n,i],[o,f]]),[[w,g],[x,j],[y,P]]=_([[l*p+c*e,l*v+c*t],[l*d+c*n,l*m+c*i],[l*b+c*o,l*h+c*f]]);return[[s*e+r*p+a*w,s*t+r*v+a*g],[s*n+r*d+a*x,s*i+r*m+a*j],[s*o+r*b+a*y,s*f+r*h+a*P]]}}}function te(e,t,n,i,o,r){return e(t,n,[i,o,r])}function ne(e,t,n,i,o,r){return e(t,n,[i,o,r])}function ie(e,t,n,i,o,r,a){return e(t,n,i,[o,r,a])}function oe(){return[[1,.3]]}function re(){return[[1,.3]]}function ae(){return[[[1,.3],[1,.3],[1,.3]]]}function le(e,t){t.value=[[1,.3]]}function*se(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function ce(e,t){t.value=[[1,.3]]}function*ue(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function _e(e,t){t.value=[[[1,.3],[1,.3],[1,.3]]]}function*fe(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function pe(e,t){const n=e.module();n.variable(t()).define(["md"],x),n.variable(t()).define(["md"],j),n.variable(t("viewof animation_speed")).define("viewof animation_speed",["Inputs"],y),n.variable(t("animation_speed")).define("animation_speed",["Generators","viewof animation_speed"],((e,t)=>e.input(t))),n.variable(t("viewof iterate_convex")).define("viewof iterate_convex",["Inputs"],P),n.variable(t("iterate_convex")).define("iterate_convex",["Generators","viewof iterate_convex"],((e,t)=>e.input(t))),n.variable(t("two_convex_sets_plot")).define("two_convex_sets_plot",["Plot","iteration_pts_convex"],k),n.variable(t("viewof reset_convex")).define("viewof reset_convex",["Inputs"],R),n.variable(t("reset_convex")).define("reset_convex",["Generators","viewof reset_convex"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],z),n.variable(t("viewof iterate_nonconvex")).define("viewof iterate_nonconvex",["Inputs"],A),n.variable(t("iterate_nonconvex")).define("iterate_nonconvex",["Generators","viewof iterate_nonconvex"],((e,t)=>e.input(t))),n.variable(t("two_nonconvex_sets_plot")).define("two_nonconvex_sets_plot",["Plot","iteration_pts_nonconvex"],I),n.variable(t("viewof reset_nonconvex")).define("viewof reset_nonconvex",["Inputs"],q),n.variable(t("reset_nonconvex")).define("reset_nonconvex",["Generators","viewof reset_nonconvex"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],M),n.variable(t()).define(["tex"],G),n.variable(t()).define(["tex","md"],D),n.variable(t("viewof projection_name")).define("viewof projection_name",["Inputs"],$),n.variable(t("projection_name")).define("projection_name",["Generators","viewof projection_name"],((e,t)=>e.input(t))),n.variable(t("viewof projection_a")).define("viewof projection_a",["Inputs","projection_name","named_projection_parameters"],C),n.variable(t("projection_a")).define("projection_a",["Generators","viewof projection_a"],((e,t)=>e.input(t))),n.variable(t("viewof projection_b")).define("viewof projection_b",["Inputs","projection_name","named_projection_parameters"],N),n.variable(t("projection_b")).define("projection_b",["Generators","viewof projection_b"],((e,t)=>e.input(t))),n.variable(t("viewof projection_c")).define("viewof projection_c",["Inputs","projection_name","named_projection_parameters"],S),n.variable(t("projection_c")).define("projection_c",["Generators","viewof projection_c"],((e,t)=>e.input(t))),n.variable(t("viewof projection_gamma")).define("viewof projection_gamma",["Inputs","projection_name"],O),n.variable(t("projection_gamma")).define("projection_gamma",["Generators","viewof projection_gamma"],((e,t)=>e.input(t))),n.variable(t()).define(["tex","md"],T),n.variable(t("viewof iterate_flower")).define("viewof iterate_flower",["Inputs"],W),n.variable(t("iterate_flower")).define("iterate_flower",["Generators","viewof iterate_flower"],((e,t)=>e.input(t))),n.variable(t("flower_sets_plot")).define("flower_sets_plot",["flower_values","iteration_pts_flower","Plot"],F),n.variable(t("viewof reset_flower")).define("viewof reset_flower",["Inputs"],H),n.variable(t("reset_flower")).define("reset_flower",["Generators","viewof reset_flower"],((e,t)=>e.input(t))),n.variable(t()).define(["htl"],B);const i=e.module(g);return n.import("nj",i),n.variable(t("named_projection_parameters")).define("named_projection_parameters",["projection_gamma"],E),n.variable(t("flower_values")).define("flower_values",["nj"],L),n.variable(t("region_nearest_convex_red")).define("region_nearest_convex_red",Z),n.variable(t("region_nearest_convex_blue")).define("region_nearest_convex_blue",J),n.variable(t("region_nearest_nonconvex_red")).define("region_nearest_nonconvex_red",K),n.variable(t("region_nearest_nonconvex_blue")).define("region_nearest_nonconvex_blue",Q),n.variable(t("region_nearest_flower_green")).define("region_nearest_flower_green",["nj","flower_values"],U),n.variable(t("generalized_projection")).define("generalized_projection",V),n.variable(t("product_space_projection")).define("product_space_projection",X),n.variable(t("diagonal_projection")).define("diagonal_projection",Y),n.variable(t("generalized_projection_multiple")).define("generalized_projection_multiple",["product_space_projection","diagonal_projection"],ee),n.variable(t("two_convex_sets")).define("two_convex_sets",["generalized_projection","region_nearest_convex_red","region_nearest_convex_blue","projection_a","projection_b","projection_c"],te),n.variable(t("two_nonconvex_sets")).define("two_nonconvex_sets",["generalized_projection","region_nearest_nonconvex_red","region_nearest_nonconvex_blue","projection_a","projection_b","projection_c"],ne),n.variable(t("three_nonconvex_sets")).define("three_nonconvex_sets",["generalized_projection_multiple","region_nearest_nonconvex_red","region_nearest_nonconvex_blue","region_nearest_flower_green","projection_a","projection_b","projection_c"],ie),n.define("initial iteration_pts_convex",oe),n.variable(t("mutable iteration_pts_convex")).define("mutable iteration_pts_convex",["Mutable","initial iteration_pts_convex"],((e,t)=>new e(t))),n.variable(t("iteration_pts_convex")).define("iteration_pts_convex",["mutable iteration_pts_convex"],(e=>e.generator)),n.define("initial iteration_pts_nonconvex",re),n.variable(t("mutable iteration_pts_nonconvex")).define("mutable iteration_pts_nonconvex",["Mutable","initial iteration_pts_nonconvex"],((e,t)=>new e(t))),n.variable(t("iteration_pts_nonconvex")).define("iteration_pts_nonconvex",["mutable iteration_pts_nonconvex"],(e=>e.generator)),n.define("initial iteration_pts_flower",ae),n.variable(t("mutable iteration_pts_flower")).define("mutable iteration_pts_flower",["Mutable","initial iteration_pts_flower"],((e,t)=>new e(t))),n.variable(t("iteration_pts_flower")).define("iteration_pts_flower",["mutable iteration_pts_flower"],(e=>e.generator)),n.variable(t("two_convex_sets_reset")).define("two_convex_sets_reset",["reset_convex","mutable iteration_pts_convex"],le),n.variable(t("two_convex_sets_generator")).define("two_convex_sets_generator",["iterate_convex","Promises","animation_speed","iteration_pts_convex","mutable iteration_pts_convex","two_convex_sets"],se),n.variable(t("two_nonconvex_sets_reset")).define("two_nonconvex_sets_reset",["reset_nonconvex","mutable iteration_pts_nonconvex"],ce),n.variable(t("two_nonconvex_sets_generator")).define("two_nonconvex_sets_generator",["iterate_nonconvex","Promises","animation_speed","iteration_pts_nonconvex","mutable iteration_pts_nonconvex","two_nonconvex_sets"],ue),n.variable(t("flower_sets_reset")).define("flower_sets_reset",["reset_flower","mutable iteration_pts_flower"],_e),n.variable(t("flower_sets_generator")).define("flower_sets_generator",["iterate_flower","Promises","animation_speed","iteration_pts_flower","mutable iteration_pts_flower","three_nonconvex_sets"],fe),n}function ve(e){return e}function de(e){return e}function me(e){return e}function be(e){return e}function he(e){return e}function we(e){return e}function ge(e){return e}function xe(e){return e}function je(e){return e}function ye(e){return e.html`<hr class="hideable-md">`}function Pe(e){return e}function ke(e){return e}function Re(e,t){const n=e.module();n.variable(t()).define(["viewof animation_speed"],ve),n.variable(t()).define(["viewof iterate_flower"],de),n.variable(t()).define(["flower_sets_plot"],me),n.variable(t()).define(["viewof reset_flower"],be),n.variable(t()).define(["viewof projection_name"],he),n.variable(t()).define(["viewof projection_a"],we),n.variable(t()).define(["viewof projection_b"],ge),n.variable(t()).define(["viewof projection_c"],xe),n.variable(t()).define(["viewof projection_gamma"],je),n.variable(t()).define(["htl"],ye);const i=e.module(pe);return n.import("viewof animation_speed",i),n.import("animation_speed",i),n.import("viewof iterate_flower",i),n.import("iterate_flower",i),n.import("viewof reset_flower",i),n.import("reset_flower",i),n.import("flower_sets_plot",i),n.import("flower_sets_generator",i),n.import("flower_sets_reset",i),n.import("viewof projection_name",i),n.import("projection_name",i),n.import("viewof projection_a",i),n.import("projection_a",i),n.import("viewof projection_b",i),n.import("projection_b",i),n.import("viewof projection_c",i),n.import("projection_c",i),n.import("viewof projection_gamma",i),n.import("projection_gamma",i),n.variable(t()).define(["flower_sets_generator"],Pe),n.variable(t()).define(["flower_sets_reset"],ke),n}n.d(t,{Z:()=>Re})},7188:(e,t,n)=>{function i(e){return e`# Ptychography Helper Functions`}function o(e){return e.html`<hr class="hideable-md">`}function r(e){return e("https://cdn.jsdelivr.net/gh/nicolaspanel/numjs@0.16/dist/numjs.min.js")}function a(e){return e("https://bundle.run/ndarray-ops@1.2.2")}function l(e){return e("https://bundle.run/ndarray-complex@1.0.3")}function s(e,t){return function(n,i){let o=e.zeros(n.shape);return t.atan2(o.selection,n.selection,i.selection),o}}function c(e,t){return function(n,i){let o=e.zeros(n.shape);return t.lts(o.selection,n.selection,i),t.bandseq(o.selection,1),o}}function u(e,t,n){return class i{constructor(t){this.shape=t;let n=t.slice();n.push(2),this.data=e.zeros(n),this._nulls=new Array(t.length).fill(null)}re(){return this.data.pick(...this._nulls,0)}im(){return this.data.pick(...this._nulls,1)}abs(){return e.sqrt(this.abs_sqr())}abs_sqr(){return e.add(this.re().multiply(this.re()),this.im().multiply(this.im()))}angle(){return t(this.im(),this.re())}clone(){let e=new i(this.shape);return e.data=this.data.clone(),e}conjugate(){let t=this.re().clone(),o=this.im().clone();n.conjeq(t.selection,o.selection);let r=new i(this.shape);return r.data=e.stack([t,o],-1),r}multiply(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.muleq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}real_multiply(t){let o=this.re().clone(),r=this.im().clone(),a=t,l=e.zeros(t.shape);n.muleq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}scalar_multiply(t,o){let r=this.re().clone(),a=this.im().clone();n.mulseq(r.selection,a.selection,t,o);let l=new i(this.shape);return l.data=e.stack([r,a],-1),l}add(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.addeq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}subtract(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.subeq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}}}function _(e){return function(t,n){let i=e.zeros(t),o=1/(t*n),r=1+((t-1)/2|0);for(var a=0;a<r;a++)i.set(a,a*o);for(a=r;a<t;a++)i.set(a,(a-t)*o);return i}}function f(e){return function(t,n){let i=[t.size,n.size],o=[];o[0]=e.zeros(i),o[1]=e.zeros(i);for(let e=0;e<i[1];e++)for(let r=0;r<i[0];r++)o[0].set(r,e,t.get(r)),o[1].set(r,e,n.get(e));return o}}function p(e){return function(t){let[n,i]=t.shape,o=n/2|0,r=i/2|0,a=e.zeros([n,i]);return a.slice([null,o],[null,r]).assign(t.slice(-o,-r),!1),a.slice([null,o],r).assign(t.slice(-o,[null,r]),!1),a.slice(-o,-r).assign(t.slice([null,o],[null,r]),!1),a.slice(-o,[null,r]).assign(t.slice([null,o],-r),!1),a}}function v(e,t,n,i){return function(o,r){let[a,l]=o.shape,[s,c]=r,u=new e([a,l]);u.data=t.fft(o.data);let _=n(a,1),f=n(l,1),[p,v]=i(_,f),d=-2*Math.PI,m=t.add(p.multiply(s),v.multiply(c)).multiply(d),b=new e([a,l]),h=t.cos(m),w=t.sin(m);b.data=t.stack([h,w],-1);let g=u.multiply(b);return g.data=t.ifft(g.data),g}}function d(e){return function(t,[n,i]){let o=new e([n,i]),r=n/2|0,a=i/2|0;return o.data.slice([null,r],[null,a],null).assign(t.slice([null,r],[null,a],null),!1),o.data.slice(-r,[null,a],null).assign(t.slice(-r,[null,a],null),!1),o.data.slice([null,r],-a,null).assign(t.slice([null,r],-a,null),!1),o.data.slice(-r,-a,null).assign(t.slice(-r,-a,null),!1),o}}function m(e,t,n){return function(i,o){let[r,a]=i.shape;console.log(r);let l=new e([r,a]);l.data=t.fft(i.data);let[s,c]=[r/o|0,a/o|0],u=n(l.data,[s,c]);return u.data=t.ifft(u.data),u}}function b(){return function(e){let t=9.109383*1e-30,n=1602177e-24,i=299792458;return 662607e-39/Math.sqrt(2*t*n*e)/Math.sqrt(1+n*e/2/t/i/i)*1e11}}function h(e){return function(t){let n=9.109383*1e-30,i=1602177e-24,o=299792458,r=e(t);return 2*Math.PI/r/t*(n*o*o+i*t)/(2*n*o*o+i*t)}}function w(e,t,n,i,o,r,a){return class{constructor(t,n,i,o,r){this._gpts=t.slice(),this._sampling=n.slice(),this._energy=i,this._wavelength=e(i),this._semiangle_cutoff=o,this._defocus=r}_get_scattering_angles(){let e=t(this._gpts[0],this._sampling[0]),r=t(this._gpts[1],this._sampling[1]),[a,l]=n(e,r);return[i.sqrt(i.add(a.multiply(a.multiply(this._wavelength*this._wavelength)),l.multiply(l.multiply(this._wavelength*this._wavelength)))),o(a,l)]}_evaluate_aberrations(e,t){let n=this._defocus/this._wavelength*Math.PI,o=e.multiply(e).multiply(n),a=i.cos(o),l=i.sin(o),s=new r(o.shape);return s.data=i.stack([a,l],-1),s}_evaluate_aperture(e,t){let n=this._semiangle_cutoff/1e3,o=new r(e.shape),l=a(e,n);return o.data=i.stack([l,i.zeros(e.shape)],-1),o}build(){let[e,t]=this._get_scattering_angles(),n=this._evaluate_aberrations(e,t),o=this._evaluate_aperture(e,t),a=n.multiply(o),l=new r(a.shape);l.data=i.ifft(a.data);let s=Math.sqrt(l.abs_sqr().sum());return this._array=l.scalar_multiply(1/s,0),this}}}function g(e,t){const n=e.module();return n.variable(t()).define(["md"],i),n.variable(t()).define(["htl"],o),n.variable(t("nj")).define("nj",["require"],r),n.variable(t("ops")).define("ops",["require"],a),n.variable(t("cops")).define("cops",["require"],l),n.variable(t("atan2")).define("atan2",["nj","ops"],s),n.variable(t("lt_int_s")).define("lt_int_s",["nj","ops"],c),n.variable(t("ComplexNDArray")).define("ComplexNDArray",["nj","atan2","cops"],u),n.variable(t("fftfreq")).define("fftfreq",["nj"],_),n.variable(t("meshgrid2D")).define("meshgrid2D",["nj"],f),n.variable(t("fftshift2D")).define("fftshift2D",["nj"],p),n.variable(t("fourier_shift")).define("fourier_shift",["ComplexNDArray","nj","fftfreq","meshgrid2D"],v),n.variable(t("corner_crop")).define("corner_crop",["ComplexNDArray"],d),n.variable(t("fourier_downsample")).define("fourier_downsample",["ComplexNDArray","nj","corner_crop"],m),n.variable(t("electron_wavelength_angstroms")).define("electron_wavelength_angstroms",b),n.variable(t("electron_interaction_parameter")).define("electron_interaction_parameter",["electron_wavelength_angstroms"],h),n.variable(t("ComplexProbe")).define("ComplexProbe",["electron_wavelength_angstroms","fftfreq","meshgrid2D","nj","atan2","ComplexNDArray","lt_int_s"],w),n}function x(e){return e`# Projection Set Algorithms

Here, we will illustrate another very powerful non-convex optimization strategy used in ptychograghy, called "projection set methods".`}function j(e){return e`## Alternating Projections

Suppose we want to find the solution at the intersection of two sets:
1. a set of all points lying on the red line, and
2. a set of all point lying on the blue line.

Seems simple right? The catch is that we're only allowed to operate on one set at a time. A simple idea could be to take alternating steps where we "project" on one of the sets.

_Note:_ By "project" here we mean finding the closest point between our current location that lies on the set.

Let's try it!`}function y(e){return e.range([50,1e3],{value:250,step:50,label:"Animation speed [ms]"})}function P(e){return e.toggle({label:"Iterate!"})}function k(e,t){return e.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[e.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:9/8,y:9/16,set:1,col:"red"},{x:-.5,y:-1/16,set:2,col:"blue"},{x:9/8,y:9/64,set:2,col:"blue"}],{x:"x",y:"y",z:"set",stroke:"col"}),e.line(t,{stroke:"orange"}),e.dot(t,{fill:"orange",fillOpacity:.5,r:10})]})}function R(e){return e.button("Reset Initial Point")}function z(e){return e`## Non-Convex Sets?

The above example was rather easy, since both our sets were convex. What do you think will happen for non-convex sets? E.g. two disconnected half-lines. Well, our naive alternating projection algorithm will get stuck!`}function A(e){return e.toggle({label:"Iterate!"})}function I(e,t){return e.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[e.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:1/4,y:1/8,set:1,col:"red"},{x:.5,y:1/4,set:2,col:"red"},{x:9/8,y:9/16,set:2,col:"red"},{x:-.5,y:-1/16,set:3,col:"blue"},{x:1/4,y:1/32,set:3,col:"blue"},{x:.5,y:1/16,set:4,col:"blue"},{x:9/8,y:9/64,set:4,col:"blue"}],{x:"x",y:"y",z:"set",stroke:"col"}),e.line(t,{stroke:"orange"}),e.dot(t,{fill:"orange",fillOpacity:.5,r:10})]})}function q(e){return e.button("Reset Initial Point")}function M(e){return e`## Generalized Projections

Turns out, we don't just have to "project" to the set exactly - we can also e.g. reflect about the set to allow for a wide search-space. More generally, we can define a "family" of generalized projection set algorithms according to the iteration:`}function G(e){return e.block`
x_{k+1} \leftarrow \left(1-a-b \right)x_k + a \Pi_1 \left[x_k\right] + b \Pi_2 \left[c \Pi[x_k]+\left(1-c\right)x_k \right]
`}function D(e,t){return t`For scalar parameters ${e`(a,b,c)`}.

Some named choices include:
- Alternating Projections (AP): ${e`(a=0,b=1,c=1)`}
- Difference Map (DM): ${e`(a=-1,b=1,c=2)`}
- Relax Reflect Reflect (RRR): ${e`(a=-\gamma,b=\gamma,c=2)`}
- Relaxed Averaged Alternating Reflections (RAAR): ${e`(a=1-2\gamma,b=\gamma,c=2)`}`}function $(e){return e.radio(["AP","DM","RRR","RAAR","Generalized"],{value:"AP",label:"Projection Name: "})}function C(e,t,n){return e.range([-1,1],{value:`${"Generalized"==t?0:n[t].a}`,step:.001,label:"Projection Parameter a"})}function N(e,t,n){return e.range([0,2],{value:`${"Generalized"==t?1:n[t].b}`,step:.001,label:"Projection Parameter b"})}function S(e,t,n){return e.range([0,2],{value:`${"Generalized"==t?1:n[t].c}`,step:.001,label:"Projection Parameter c"})}function O(e,t){return e.range([0,1],{value:""+("RRR"==t||"RAAR"==t?.875:0),step:.001,label:"Projection Parameter \u03b3"})}function T(e,t){return t`## Multiple Sets

In general, our algorithm above relies on only two generalized projections. When we have more than two sets, we need to reformulate our constraints in the form above. 

A simple way to do this is to apply our projections on a copy of the current iterate separately (${e`\Pi_1`} above), and then average our points together (${e`\Pi_2`} above).`}function W(e){return e.toggle({label:"Iterate!"})}function F(e,t,n){let i=[...Array(e.shape[0])].map(((t,n)=>({x:e.get(n,0),y:e.get(n,1),set:5,col:"green"}))),o=t.map((e=>e.reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]])).map((t=>t/e.length))));return n.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[n.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:1/4,y:1/8,set:1,col:"red"},{x:.5,y:1/4,set:2,col:"red"},{x:9/8,y:9/16,set:2,col:"red"},{x:-.5,y:-1/16,set:3,col:"blue"},{x:1/4,y:1/32,set:3,col:"blue"},{x:.5,y:1/16,set:4,col:"blue"},{x:9/8,y:9/64,set:4,col:"blue"},...i],{x:"x",y:"y",z:"set",stroke:"col"}),n.line(o,{stroke:"orange"}),n.dot(o,{fill:"orange",fillOpacity:.5,r:10})]})}function H(e){return e.button("Reset Initial Point")}function B(e){return e.html`<hr class="hideable-md">`}function E(e){return{AP:{a:0,b:1,c:1},DM:{a:-1,b:1,c:2},RRR:{a:-e,b:e,c:2},RAAR:{a:1-2*e,b:e,c:2}}}function L(e){let t=e.arange(0,2*Math.PI,Math.PI/512),n=[-5/4*Math.cos(Math.PI/8),-5/4*Math.sin(Math.PI/8)],i=e.sin(t.multiply(4)).divide(4).add(1),o=i.multiply(e.cos(t)).subtract(n[0]).divide(3),r=i.multiply(e.sin(t)).subtract(n[1]).divide(3);return e.stack([o,r],-1)}function Z(){return function([e,t]){return[.4*(2*e+t),(2*e+t)/5]}}function J(){return function([e,t]){return[32/65*(2*e+t/4),4/65*(2*e+t/4)]}}function K(){return function([e,t]){if(8*e+4*t>=5||2*e+t<=5/8){let n=(2*e+t)/5;return[2*n,n]}if(15/16<2*e+t&&2*e+t<5/4)return[.5,1/4];if(2*e+t>5/8)return[1/4,1/8];{let n=2*t/5+4*e/5-1/8;return[2*n,n]}}}function Q(){return function([e,t]){if(8*e+t>=65/16||8*e+t<=65/32){let n=(8*e+t)/65;return[8*n,n]}if(195/64<8*e+t&&e+t<65/16)return[.5,1/16];if(8*e+t>=65/32)return[1/4,1/32];{let n=2*t/65+16*e/64-1/32;return[8*n,n]}}}function U(e,t){return function([n,i]){let o=e.add(t.pick(null,0).subtract(n).pow(2),t.pick(null,1).subtract(i).pow(2)).tolist().reduce(((e,t,n,i)=>t>i[e]?e:n),-1);return[t.get(o,0),t.get(o,1)]}}function V(){return function(e,t,[n,i,o]){let r=1-n-i,a=1-o;return function([l,s]){let[c,u]=e([l,s]),[_,f]=t([o*c+a*l,o*u+a*s]);return[r*l+n*c+i*_,r*s+n*u+i*f]}}}function X(){return function(e,t,n){return function([[i,o],[r,a],[l,s]]){return[e([i,o]),t([r,a]),n([l,s])]}}}function Y(){return function([[e,t],[n,i],[o,r]]){let a=(e+n+o)/3,l=(t+i+r)/3;return[[a,l],[a,l],[a,l]]}}function ee(e,t){return function(n,i,o,[r,a,l]){let s=1-r-a,c=1-l,u=e(n,i,o),_=t;return function([[e,t],[n,i],[o,f]]){let[[p,v],[d,m],[b,h]]=u([[e,t],[n,i],[o,f]]),[[w,g],[x,j],[y,P]]=_([[l*p+c*e,l*v+c*t],[l*d+c*n,l*m+c*i],[l*b+c*o,l*h+c*f]]);return[[s*e+r*p+a*w,s*t+r*v+a*g],[s*n+r*d+a*x,s*i+r*m+a*j],[s*o+r*b+a*y,s*f+r*h+a*P]]}}}function te(e,t,n,i,o,r){return e(t,n,[i,o,r])}function ne(e,t,n,i,o,r){return e(t,n,[i,o,r])}function ie(e,t,n,i,o,r,a){return e(t,n,i,[o,r,a])}function oe(){return[[1,.3]]}function re(){return[[1,.3]]}function ae(){return[[[1,.3],[1,.3],[1,.3]]]}function le(e,t){t.value=[[1,.3]]}function*se(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function ce(e,t){t.value=[[1,.3]]}function*ue(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function _e(e,t){t.value=[[[1,.3],[1,.3],[1,.3]]]}function*fe(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function pe(e,t){const n=e.module();n.variable(t()).define(["md"],x),n.variable(t()).define(["md"],j),n.variable(t("viewof animation_speed")).define("viewof animation_speed",["Inputs"],y),n.variable(t("animation_speed")).define("animation_speed",["Generators","viewof animation_speed"],((e,t)=>e.input(t))),n.variable(t("viewof iterate_convex")).define("viewof iterate_convex",["Inputs"],P),n.variable(t("iterate_convex")).define("iterate_convex",["Generators","viewof iterate_convex"],((e,t)=>e.input(t))),n.variable(t("two_convex_sets_plot")).define("two_convex_sets_plot",["Plot","iteration_pts_convex"],k),n.variable(t("viewof reset_convex")).define("viewof reset_convex",["Inputs"],R),n.variable(t("reset_convex")).define("reset_convex",["Generators","viewof reset_convex"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],z),n.variable(t("viewof iterate_nonconvex")).define("viewof iterate_nonconvex",["Inputs"],A),n.variable(t("iterate_nonconvex")).define("iterate_nonconvex",["Generators","viewof iterate_nonconvex"],((e,t)=>e.input(t))),n.variable(t()).define(["Plot","iteration_pts_nonconvex"],I),n.variable(t("viewof reset_nonconvex")).define("viewof reset_nonconvex",["Inputs"],q),n.variable(t("reset_nonconvex")).define("reset_nonconvex",["Generators","viewof reset_nonconvex"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],M),n.variable(t()).define(["tex"],G),n.variable(t()).define(["tex","md"],D),n.variable(t("viewof projection_name")).define("viewof projection_name",["Inputs"],$),n.variable(t("projection_name")).define("projection_name",["Generators","viewof projection_name"],((e,t)=>e.input(t))),n.variable(t("viewof projection_a")).define("viewof projection_a",["Inputs","projection_name","named_projection_parameters"],C),n.variable(t("projection_a")).define("projection_a",["Generators","viewof projection_a"],((e,t)=>e.input(t))),n.variable(t("viewof projection_b")).define("viewof projection_b",["Inputs","projection_name","named_projection_parameters"],N),n.variable(t("projection_b")).define("projection_b",["Generators","viewof projection_b"],((e,t)=>e.input(t))),n.variable(t("viewof projection_c")).define("viewof projection_c",["Inputs","projection_name","named_projection_parameters"],S),n.variable(t("projection_c")).define("projection_c",["Generators","viewof projection_c"],((e,t)=>e.input(t))),n.variable(t("viewof projection_gamma")).define("viewof projection_gamma",["Inputs","projection_name"],O),n.variable(t("projection_gamma")).define("projection_gamma",["Generators","viewof projection_gamma"],((e,t)=>e.input(t))),n.variable(t()).define(["tex","md"],T),n.variable(t("viewof iterate_flower")).define("viewof iterate_flower",["Inputs"],W),n.variable(t("iterate_flower")).define("iterate_flower",["Generators","viewof iterate_flower"],((e,t)=>e.input(t))),n.variable(t()).define(["flower_values","iteration_pts_flower","Plot"],F),n.variable(t("viewof reset_flower")).define("viewof reset_flower",["Inputs"],H),n.variable(t("reset_flower")).define("reset_flower",["Generators","viewof reset_flower"],((e,t)=>e.input(t))),n.variable(t()).define(["htl"],B);const i=e.module(g);return n.import("nj",i),n.variable(t("named_projection_parameters")).define("named_projection_parameters",["projection_gamma"],E),n.variable(t("flower_values")).define("flower_values",["nj"],L),n.variable(t("region_nearest_convex_red")).define("region_nearest_convex_red",Z),n.variable(t("region_nearest_convex_blue")).define("region_nearest_convex_blue",J),n.variable(t("region_nearest_nonconvex_red")).define("region_nearest_nonconvex_red",K),n.variable(t("region_nearest_nonconvex_blue")).define("region_nearest_nonconvex_blue",Q),n.variable(t("region_nearest_flower_green")).define("region_nearest_flower_green",["nj","flower_values"],U),n.variable(t("generalized_projection")).define("generalized_projection",V),n.variable(t("product_space_projection")).define("product_space_projection",X),n.variable(t("diagonal_projection")).define("diagonal_projection",Y),n.variable(t("generalized_projection_multiple")).define("generalized_projection_multiple",["product_space_projection","diagonal_projection"],ee),n.variable(t("two_convex_sets")).define("two_convex_sets",["generalized_projection","region_nearest_convex_red","region_nearest_convex_blue","projection_a","projection_b","projection_c"],te),n.variable(t("two_nonconvex_sets")).define("two_nonconvex_sets",["generalized_projection","region_nearest_nonconvex_red","region_nearest_nonconvex_blue","projection_a","projection_b","projection_c"],ne),n.variable(t("three_nonconvex_sets")).define("three_nonconvex_sets",["generalized_projection_multiple","region_nearest_nonconvex_red","region_nearest_nonconvex_blue","region_nearest_flower_green","projection_a","projection_b","projection_c"],ie),n.define("initial iteration_pts_convex",oe),n.variable(t("mutable iteration_pts_convex")).define("mutable iteration_pts_convex",["Mutable","initial iteration_pts_convex"],((e,t)=>new e(t))),n.variable(t("iteration_pts_convex")).define("iteration_pts_convex",["mutable iteration_pts_convex"],(e=>e.generator)),n.define("initial iteration_pts_nonconvex",re),n.variable(t("mutable iteration_pts_nonconvex")).define("mutable iteration_pts_nonconvex",["Mutable","initial iteration_pts_nonconvex"],((e,t)=>new e(t))),n.variable(t("iteration_pts_nonconvex")).define("iteration_pts_nonconvex",["mutable iteration_pts_nonconvex"],(e=>e.generator)),n.define("initial iteration_pts_flower",ae),n.variable(t("mutable iteration_pts_flower")).define("mutable iteration_pts_flower",["Mutable","initial iteration_pts_flower"],((e,t)=>new e(t))),n.variable(t("iteration_pts_flower")).define("iteration_pts_flower",["mutable iteration_pts_flower"],(e=>e.generator)),n.variable(t("two_convex_sets_reset")).define("two_convex_sets_reset",["reset_convex","mutable iteration_pts_convex"],le),n.variable(t("two_convex_sets_generator")).define("two_convex_sets_generator",["iterate_convex","Promises","animation_speed","iteration_pts_convex","mutable iteration_pts_convex","two_convex_sets"],se),n.variable(t()).define(["reset_nonconvex","mutable iteration_pts_nonconvex"],ce),n.variable(t()).define(["iterate_nonconvex","Promises","animation_speed","iteration_pts_nonconvex","mutable iteration_pts_nonconvex","two_nonconvex_sets"],ue),n.variable(t()).define(["reset_flower","mutable iteration_pts_flower"],_e),n.variable(t()).define(["iterate_flower","Promises","animation_speed","iteration_pts_flower","mutable iteration_pts_flower","three_nonconvex_sets"],fe),n}function ve(e){return e}function de(e){return e}function me(e){return e}function be(e){return e}function he(e){return e.html`<hr class="hideable-md">`}function we(e){return e}function ge(e){return e}function xe(e,t){const n=e.module();n.variable(t()).define(["viewof animation_speed"],ve),n.variable(t()).define(["viewof iterate_convex"],de),n.variable(t()).define(["two_convex_sets_plot"],me),n.variable(t()).define(["viewof reset_convex"],be),n.variable(t()).define(["htl"],he);const i=e.module(pe);return n.import("viewof animation_speed",i),n.import("animation_speed",i),n.import("viewof iterate_convex",i),n.import("iterate_convex",i),n.import("viewof reset_convex",i),n.import("reset_convex",i),n.import("two_convex_sets_plot",i),n.import("two_convex_sets_generator",i),n.import("two_convex_sets_reset",i),n.variable(t()).define(["two_convex_sets_generator"],we),n.variable(t()).define(["two_convex_sets_reset"],ge),n}n.d(t,{Z:()=>xe})},7109:(e,t,n)=>{function i(e){return e`# Ptychography Helper Functions`}function o(e){return e.html`<hr class="hideable-md">`}function r(e){return e("https://cdn.jsdelivr.net/gh/nicolaspanel/numjs@0.16/dist/numjs.min.js")}function a(e){return e("https://bundle.run/ndarray-ops@1.2.2")}function l(e){return e("https://bundle.run/ndarray-complex@1.0.3")}function s(e,t){return function(n,i){let o=e.zeros(n.shape);return t.atan2(o.selection,n.selection,i.selection),o}}function c(e,t){return function(n,i){let o=e.zeros(n.shape);return t.lts(o.selection,n.selection,i),t.bandseq(o.selection,1),o}}function u(e,t,n){return class i{constructor(t){this.shape=t;let n=t.slice();n.push(2),this.data=e.zeros(n),this._nulls=new Array(t.length).fill(null)}re(){return this.data.pick(...this._nulls,0)}im(){return this.data.pick(...this._nulls,1)}abs(){return e.sqrt(this.abs_sqr())}abs_sqr(){return e.add(this.re().multiply(this.re()),this.im().multiply(this.im()))}angle(){return t(this.im(),this.re())}clone(){let e=new i(this.shape);return e.data=this.data.clone(),e}conjugate(){let t=this.re().clone(),o=this.im().clone();n.conjeq(t.selection,o.selection);let r=new i(this.shape);return r.data=e.stack([t,o],-1),r}multiply(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.muleq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}real_multiply(t){let o=this.re().clone(),r=this.im().clone(),a=t,l=e.zeros(t.shape);n.muleq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}scalar_multiply(t,o){let r=this.re().clone(),a=this.im().clone();n.mulseq(r.selection,a.selection,t,o);let l=new i(this.shape);return l.data=e.stack([r,a],-1),l}add(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.addeq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}subtract(t){let o=this.re().clone(),r=this.im().clone(),a=t.re(),l=t.im();n.subeq(o.selection,r.selection,a.selection,l.selection);let s=new i(this.shape);return s.data=e.stack([o,r],-1),s}}}function _(e){return function(t,n){let i=e.zeros(t),o=1/(t*n),r=1+((t-1)/2|0);for(var a=0;a<r;a++)i.set(a,a*o);for(a=r;a<t;a++)i.set(a,(a-t)*o);return i}}function f(e){return function(t,n){let i=[t.size,n.size],o=[];o[0]=e.zeros(i),o[1]=e.zeros(i);for(let e=0;e<i[1];e++)for(let r=0;r<i[0];r++)o[0].set(r,e,t.get(r)),o[1].set(r,e,n.get(e));return o}}function p(e){return function(t){let[n,i]=t.shape,o=n/2|0,r=i/2|0,a=e.zeros([n,i]);return a.slice([null,o],[null,r]).assign(t.slice(-o,-r),!1),a.slice([null,o],r).assign(t.slice(-o,[null,r]),!1),a.slice(-o,-r).assign(t.slice([null,o],[null,r]),!1),a.slice(-o,[null,r]).assign(t.slice([null,o],-r),!1),a}}function v(e,t,n,i){return function(o,r){let[a,l]=o.shape,[s,c]=r,u=new e([a,l]);u.data=t.fft(o.data);let _=n(a,1),f=n(l,1),[p,v]=i(_,f),d=-2*Math.PI,m=t.add(p.multiply(s),v.multiply(c)).multiply(d),b=new e([a,l]),h=t.cos(m),w=t.sin(m);b.data=t.stack([h,w],-1);let g=u.multiply(b);return g.data=t.ifft(g.data),g}}function d(e){return function(t,[n,i]){let o=new e([n,i]),r=n/2|0,a=i/2|0;return o.data.slice([null,r],[null,a],null).assign(t.slice([null,r],[null,a],null),!1),o.data.slice(-r,[null,a],null).assign(t.slice(-r,[null,a],null),!1),o.data.slice([null,r],-a,null).assign(t.slice([null,r],-a,null),!1),o.data.slice(-r,-a,null).assign(t.slice(-r,-a,null),!1),o}}function m(e,t,n){return function(i,o){let[r,a]=i.shape;console.log(r);let l=new e([r,a]);l.data=t.fft(i.data);let[s,c]=[r/o|0,a/o|0],u=n(l.data,[s,c]);return u.data=t.ifft(u.data),u}}function b(){return function(e){let t=9.109383*1e-30,n=1602177e-24,i=299792458;return 662607e-39/Math.sqrt(2*t*n*e)/Math.sqrt(1+n*e/2/t/i/i)*1e11}}function h(e){return function(t){let n=9.109383*1e-30,i=1602177e-24,o=299792458,r=e(t);return 2*Math.PI/r/t*(n*o*o+i*t)/(2*n*o*o+i*t)}}function w(e,t,n,i,o,r,a){return class{constructor(t,n,i,o,r){this._gpts=t.slice(),this._sampling=n.slice(),this._energy=i,this._wavelength=e(i),this._semiangle_cutoff=o,this._defocus=r}_get_scattering_angles(){let e=t(this._gpts[0],this._sampling[0]),r=t(this._gpts[1],this._sampling[1]),[a,l]=n(e,r);return[i.sqrt(i.add(a.multiply(a.multiply(this._wavelength*this._wavelength)),l.multiply(l.multiply(this._wavelength*this._wavelength)))),o(a,l)]}_evaluate_aberrations(e,t){let n=this._defocus/this._wavelength*Math.PI,o=e.multiply(e).multiply(n),a=i.cos(o),l=i.sin(o),s=new r(o.shape);return s.data=i.stack([a,l],-1),s}_evaluate_aperture(e,t){let n=this._semiangle_cutoff/1e3,o=new r(e.shape),l=a(e,n);return o.data=i.stack([l,i.zeros(e.shape)],-1),o}build(){let[e,t]=this._get_scattering_angles(),n=this._evaluate_aberrations(e,t),o=this._evaluate_aperture(e,t),a=n.multiply(o),l=new r(a.shape);l.data=i.ifft(a.data);let s=Math.sqrt(l.abs_sqr().sum());return this._array=l.scalar_multiply(1/s,0),this}}}function g(e,t){const n=e.module();return n.variable(t()).define(["md"],i),n.variable(t()).define(["htl"],o),n.variable(t("nj")).define("nj",["require"],r),n.variable(t("ops")).define("ops",["require"],a),n.variable(t("cops")).define("cops",["require"],l),n.variable(t("atan2")).define("atan2",["nj","ops"],s),n.variable(t("lt_int_s")).define("lt_int_s",["nj","ops"],c),n.variable(t("ComplexNDArray")).define("ComplexNDArray",["nj","atan2","cops"],u),n.variable(t("fftfreq")).define("fftfreq",["nj"],_),n.variable(t("meshgrid2D")).define("meshgrid2D",["nj"],f),n.variable(t("fftshift2D")).define("fftshift2D",["nj"],p),n.variable(t("fourier_shift")).define("fourier_shift",["ComplexNDArray","nj","fftfreq","meshgrid2D"],v),n.variable(t("corner_crop")).define("corner_crop",["ComplexNDArray"],d),n.variable(t("fourier_downsample")).define("fourier_downsample",["ComplexNDArray","nj","corner_crop"],m),n.variable(t("electron_wavelength_angstroms")).define("electron_wavelength_angstroms",b),n.variable(t("electron_interaction_parameter")).define("electron_interaction_parameter",["electron_wavelength_angstroms"],h),n.variable(t("ComplexProbe")).define("ComplexProbe",["electron_wavelength_angstroms","fftfreq","meshgrid2D","nj","atan2","ComplexNDArray","lt_int_s"],w),n}function x(e){return e`# Projection Set Algorithms

Here, we will illustrate another very powerful non-convex optimization strategy used in ptychograghy, called "projection set methods".`}function j(e){return e`## Alternating Projections

Suppose we want to find the solution at the intersection of two sets:
1. a set of all points lying on the red line, and
2. a set of all point lying on the blue line.

Seems simple right? The catch is that we're only allowed to operate on one set at a time. A simple idea could be to take alternating steps where we "project" on one of the sets.

_Note:_ By "project" here we mean finding the closest point between our current location that lies on the set.

Let's try it!`}function y(e){return e.range([50,1e3],{value:250,step:50,label:"Animation speed [ms]"})}function P(e){return e.toggle({label:"Iterate!"})}function k(e,t){return e.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[e.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:9/8,y:9/16,set:1,col:"red"},{x:-.5,y:-1/16,set:2,col:"blue"},{x:9/8,y:9/64,set:2,col:"blue"}],{x:"x",y:"y",z:"set",stroke:"col"}),e.line(t,{stroke:"orange"}),e.dot(t,{fill:"orange",fillOpacity:.5,r:10})]})}function R(e){return e.button("Reset Initial Point")}function z(e){return e`## Non-Convex Sets?

The above example was rather easy, since both our sets were convex. What do you think will happen for non-convex sets? E.g. two disconnected half-lines. Well, our naive alternating projection algorithm will get stuck!`}function A(e){return e.toggle({label:"Iterate!"})}function I(e,t){return e.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[e.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:1/4,y:1/8,set:1,col:"red"},{x:.5,y:1/4,set:2,col:"red"},{x:9/8,y:9/16,set:2,col:"red"},{x:-.5,y:-1/16,set:3,col:"blue"},{x:1/4,y:1/32,set:3,col:"blue"},{x:.5,y:1/16,set:4,col:"blue"},{x:9/8,y:9/64,set:4,col:"blue"}],{x:"x",y:"y",z:"set",stroke:"col"}),e.line(t,{stroke:"orange"}),e.dot(t,{fill:"orange",fillOpacity:.5,r:10})]})}function q(e){return e.button("Reset Initial Point")}function M(e){return e`## Generalized Projections

Turns out, we don't just have to "project" to the set exactly - we can also e.g. reflect about the set to allow for a wide search-space. More generally, we can define a "family" of generalized projection set algorithms according to the iteration:`}function G(e){return e.block`
x_{k+1} \leftarrow \left(1-a-b \right)x_k + a \Pi_1 \left[x_k\right] + b \Pi_2 \left[c \Pi[x_k]+\left(1-c\right)x_k \right]
`}function D(e,t){return t`For scalar parameters ${e`(a,b,c)`}.

Some named choices include:
- Alternating Projections (AP): ${e`(a=0,b=1,c=1)`}
- Difference Map (DM): ${e`(a=-1,b=1,c=2)`}
- Relax Reflect Reflect (RRR): ${e`(a=-\gamma,b=\gamma,c=2)`}
- Relaxed Averaged Alternating Reflections (RAAR): ${e`(a=1-2\gamma,b=\gamma,c=2)`}`}function $(e){return e.radio(["AP","DM","RRR","RAAR","Generalized"],{value:"AP",label:"Projection Name: "})}function C(e,t,n){return e.range([-1,1],{value:`${"Generalized"==t?0:n[t].a}`,step:.001,label:"Projection Parameter a"})}function N(e,t,n){return e.range([0,2],{value:`${"Generalized"==t?1:n[t].b}`,step:.001,label:"Projection Parameter b"})}function S(e,t,n){return e.range([0,2],{value:`${"Generalized"==t?1:n[t].c}`,step:.001,label:"Projection Parameter c"})}function O(e,t){return e.range([0,1],{value:""+("RRR"==t||"RAAR"==t?.875:0),step:.001,label:"Projection Parameter \u03b3"})}function T(e,t){return t`## Multiple Sets

In general, our algorithm above relies on only two generalized projections. When we have more than two sets, we need to reformulate our constraints in the form above. 

A simple way to do this is to apply our projections on a copy of the current iterate separately (${e`\Pi_1`} above), and then average our points together (${e`\Pi_2`} above).`}function W(e){return e.toggle({label:"Iterate!"})}function F(e,t,n){let i=[...Array(e.shape[0])].map(((t,n)=>({x:e.get(n,0),y:e.get(n,1),set:5,col:"green"}))),o=t.map((e=>e.reduce(((e,t)=>[e[0]+t[0],e[1]+t[1]])).map((t=>t/e.length))));return n.plot({x:{axis:!1,domain:[-.5,9/8]},y:{axis:!1,domain:[-1/4,.5]},aspectRatio:1,style:{background:"none"},marks:[n.line([{x:-.5,y:-1/4,set:1,col:"red"},{x:1/4,y:1/8,set:1,col:"red"},{x:.5,y:1/4,set:2,col:"red"},{x:9/8,y:9/16,set:2,col:"red"},{x:-.5,y:-1/16,set:3,col:"blue"},{x:1/4,y:1/32,set:3,col:"blue"},{x:.5,y:1/16,set:4,col:"blue"},{x:9/8,y:9/64,set:4,col:"blue"},...i],{x:"x",y:"y",z:"set",stroke:"col"}),n.line(o,{stroke:"orange"}),n.dot(o,{fill:"orange",fillOpacity:.5,r:10})]})}function H(e){return e.button("Reset Initial Point")}function B(e){return e.html`<hr class="hideable-md">`}function E(e){return{AP:{a:0,b:1,c:1},DM:{a:-1,b:1,c:2},RRR:{a:-e,b:e,c:2},RAAR:{a:1-2*e,b:e,c:2}}}function L(e){let t=e.arange(0,2*Math.PI,Math.PI/512),n=[-5/4*Math.cos(Math.PI/8),-5/4*Math.sin(Math.PI/8)],i=e.sin(t.multiply(4)).divide(4).add(1),o=i.multiply(e.cos(t)).subtract(n[0]).divide(3),r=i.multiply(e.sin(t)).subtract(n[1]).divide(3);return e.stack([o,r],-1)}function Z(){return function([e,t]){return[.4*(2*e+t),(2*e+t)/5]}}function J(){return function([e,t]){return[32/65*(2*e+t/4),4/65*(2*e+t/4)]}}function K(){return function([e,t]){if(8*e+4*t>=5||2*e+t<=5/8){let n=(2*e+t)/5;return[2*n,n]}if(15/16<2*e+t&&2*e+t<5/4)return[.5,1/4];if(2*e+t>5/8)return[1/4,1/8];{let n=2*t/5+4*e/5-1/8;return[2*n,n]}}}function Q(){return function([e,t]){if(8*e+t>=65/16||8*e+t<=65/32){let n=(8*e+t)/65;return[8*n,n]}if(195/64<8*e+t&&e+t<65/16)return[.5,1/16];if(8*e+t>=65/32)return[1/4,1/32];{let n=2*t/65+16*e/64-1/32;return[8*n,n]}}}function U(e,t){return function([n,i]){let o=e.add(t.pick(null,0).subtract(n).pow(2),t.pick(null,1).subtract(i).pow(2)).tolist().reduce(((e,t,n,i)=>t>i[e]?e:n),-1);return[t.get(o,0),t.get(o,1)]}}function V(){return function(e,t,[n,i,o]){let r=1-n-i,a=1-o;return function([l,s]){let[c,u]=e([l,s]),[_,f]=t([o*c+a*l,o*u+a*s]);return[r*l+n*c+i*_,r*s+n*u+i*f]}}}function X(){return function(e,t,n){return function([[i,o],[r,a],[l,s]]){return[e([i,o]),t([r,a]),n([l,s])]}}}function Y(){return function([[e,t],[n,i],[o,r]]){let a=(e+n+o)/3,l=(t+i+r)/3;return[[a,l],[a,l],[a,l]]}}function ee(e,t){return function(n,i,o,[r,a,l]){let s=1-r-a,c=1-l,u=e(n,i,o),_=t;return function([[e,t],[n,i],[o,f]]){let[[p,v],[d,m],[b,h]]=u([[e,t],[n,i],[o,f]]),[[w,g],[x,j],[y,P]]=_([[l*p+c*e,l*v+c*t],[l*d+c*n,l*m+c*i],[l*b+c*o,l*h+c*f]]);return[[s*e+r*p+a*w,s*t+r*v+a*g],[s*n+r*d+a*x,s*i+r*m+a*j],[s*o+r*b+a*y,s*f+r*h+a*P]]}}}function te(e,t,n,i,o,r){return e(t,n,[i,o,r])}function ne(e,t,n,i,o,r){return e(t,n,[i,o,r])}function ie(e,t,n,i,o,r,a){return e(t,n,i,[o,r,a])}function oe(){return[[1,.3]]}function re(){return[[1,.3]]}function ae(){return[[[1,.3],[1,.3],[1,.3]]]}function le(e,t){t.value=[[1,.3]]}function*se(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function ce(e,t){t.value=[[1,.3]]}function*ue(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function _e(e,t){t.value=[[[1,.3],[1,.3],[1,.3]]]}function*fe(e,t,n,i,o,r){let a=0;for(;e;){yield t.tick(n,++a);let e=i.length;o.value=[...i,r(i[e-1])]}}function pe(e,t){const n=e.module();n.variable(t()).define(["md"],x),n.variable(t()).define(["md"],j),n.variable(t("viewof animation_speed")).define("viewof animation_speed",["Inputs"],y),n.variable(t("animation_speed")).define("animation_speed",["Generators","viewof animation_speed"],((e,t)=>e.input(t))),n.variable(t("viewof iterate_convex")).define("viewof iterate_convex",["Inputs"],P),n.variable(t("iterate_convex")).define("iterate_convex",["Generators","viewof iterate_convex"],((e,t)=>e.input(t))),n.variable(t("two_convex_sets_plot")).define("two_convex_sets_plot",["Plot","iteration_pts_convex"],k),n.variable(t("viewof reset_convex")).define("viewof reset_convex",["Inputs"],R),n.variable(t("reset_convex")).define("reset_convex",["Generators","viewof reset_convex"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],z),n.variable(t("viewof iterate_nonconvex")).define("viewof iterate_nonconvex",["Inputs"],A),n.variable(t("iterate_nonconvex")).define("iterate_nonconvex",["Generators","viewof iterate_nonconvex"],((e,t)=>e.input(t))),n.variable(t("two_nonconvex_sets_plot")).define("two_nonconvex_sets_plot",["Plot","iteration_pts_nonconvex"],I),n.variable(t("viewof reset_nonconvex")).define("viewof reset_nonconvex",["Inputs"],q),n.variable(t("reset_nonconvex")).define("reset_nonconvex",["Generators","viewof reset_nonconvex"],((e,t)=>e.input(t))),n.variable(t()).define(["md"],M),n.variable(t()).define(["tex"],G),n.variable(t()).define(["tex","md"],D),n.variable(t("viewof projection_name")).define("viewof projection_name",["Inputs"],$),n.variable(t("projection_name")).define("projection_name",["Generators","viewof projection_name"],((e,t)=>e.input(t))),n.variable(t("viewof projection_a")).define("viewof projection_a",["Inputs","projection_name","named_projection_parameters"],C),n.variable(t("projection_a")).define("projection_a",["Generators","viewof projection_a"],((e,t)=>e.input(t))),n.variable(t("viewof projection_b")).define("viewof projection_b",["Inputs","projection_name","named_projection_parameters"],N),n.variable(t("projection_b")).define("projection_b",["Generators","viewof projection_b"],((e,t)=>e.input(t))),n.variable(t("viewof projection_c")).define("viewof projection_c",["Inputs","projection_name","named_projection_parameters"],S),n.variable(t("projection_c")).define("projection_c",["Generators","viewof projection_c"],((e,t)=>e.input(t))),n.variable(t("viewof projection_gamma")).define("viewof projection_gamma",["Inputs","projection_name"],O),n.variable(t("projection_gamma")).define("projection_gamma",["Generators","viewof projection_gamma"],((e,t)=>e.input(t))),n.variable(t()).define(["tex","md"],T),n.variable(t("viewof iterate_flower")).define("viewof iterate_flower",["Inputs"],W),n.variable(t("iterate_flower")).define("iterate_flower",["Generators","viewof iterate_flower"],((e,t)=>e.input(t))),n.variable(t()).define(["flower_values","iteration_pts_flower","Plot"],F),n.variable(t("viewof reset_flower")).define("viewof reset_flower",["Inputs"],H),n.variable(t("reset_flower")).define("reset_flower",["Generators","viewof reset_flower"],((e,t)=>e.input(t))),n.variable(t()).define(["htl"],B);const i=e.module(g);return n.import("nj",i),n.variable(t("named_projection_parameters")).define("named_projection_parameters",["projection_gamma"],E),n.variable(t("flower_values")).define("flower_values",["nj"],L),n.variable(t("region_nearest_convex_red")).define("region_nearest_convex_red",Z),n.variable(t("region_nearest_convex_blue")).define("region_nearest_convex_blue",J),n.variable(t("region_nearest_nonconvex_red")).define("region_nearest_nonconvex_red",K),n.variable(t("region_nearest_nonconvex_blue")).define("region_nearest_nonconvex_blue",Q),n.variable(t("region_nearest_flower_green")).define("region_nearest_flower_green",["nj","flower_values"],U),n.variable(t("generalized_projection")).define("generalized_projection",V),n.variable(t("product_space_projection")).define("product_space_projection",X),n.variable(t("diagonal_projection")).define("diagonal_projection",Y),n.variable(t("generalized_projection_multiple")).define("generalized_projection_multiple",["product_space_projection","diagonal_projection"],ee),n.variable(t("two_convex_sets")).define("two_convex_sets",["generalized_projection","region_nearest_convex_red","region_nearest_convex_blue","projection_a","projection_b","projection_c"],te),n.variable(t("two_nonconvex_sets")).define("two_nonconvex_sets",["generalized_projection","region_nearest_nonconvex_red","region_nearest_nonconvex_blue","projection_a","projection_b","projection_c"],ne),n.variable(t("three_nonconvex_sets")).define("three_nonconvex_sets",["generalized_projection_multiple","region_nearest_nonconvex_red","region_nearest_nonconvex_blue","region_nearest_flower_green","projection_a","projection_b","projection_c"],ie),n.define("initial iteration_pts_convex",oe),n.variable(t("mutable iteration_pts_convex")).define("mutable iteration_pts_convex",["Mutable","initial iteration_pts_convex"],((e,t)=>new e(t))),n.variable(t("iteration_pts_convex")).define("iteration_pts_convex",["mutable iteration_pts_convex"],(e=>e.generator)),n.define("initial iteration_pts_nonconvex",re),n.variable(t("mutable iteration_pts_nonconvex")).define("mutable iteration_pts_nonconvex",["Mutable","initial iteration_pts_nonconvex"],((e,t)=>new e(t))),n.variable(t("iteration_pts_nonconvex")).define("iteration_pts_nonconvex",["mutable iteration_pts_nonconvex"],(e=>e.generator)),n.define("initial iteration_pts_flower",ae),n.variable(t("mutable iteration_pts_flower")).define("mutable iteration_pts_flower",["Mutable","initial iteration_pts_flower"],((e,t)=>new e(t))),n.variable(t("iteration_pts_flower")).define("iteration_pts_flower",["mutable iteration_pts_flower"],(e=>e.generator)),n.variable(t("two_convex_sets_reset")).define("two_convex_sets_reset",["reset_convex","mutable iteration_pts_convex"],le),n.variable(t("two_convex_sets_generator")).define("two_convex_sets_generator",["iterate_convex","Promises","animation_speed","iteration_pts_convex","mutable iteration_pts_convex","two_convex_sets"],se),n.variable(t("two_nonconvex_sets_reset")).define("two_nonconvex_sets_reset",["reset_nonconvex","mutable iteration_pts_nonconvex"],ce),n.variable(t("two_nonconvex_sets_generator")).define("two_nonconvex_sets_generator",["iterate_nonconvex","Promises","animation_speed","iteration_pts_nonconvex","mutable iteration_pts_nonconvex","two_nonconvex_sets"],ue),n.variable(t()).define(["reset_flower","mutable iteration_pts_flower"],_e),n.variable(t()).define(["iterate_flower","Promises","animation_speed","iteration_pts_flower","mutable iteration_pts_flower","three_nonconvex_sets"],fe),n}function ve(e){return e}function de(e){return e}function me(e){return e}function be(e){return e}function he(e){return e}function we(e){return e}function ge(e){return e}function xe(e){return e}function je(e){return e}function ye(e){return e.html`<hr class="hideable-md">`}function Pe(e){return e}function ke(e){return e}function Re(e,t){const n=e.module();n.variable(t()).define(["viewof animation_speed"],ve),n.variable(t()).define(["viewof iterate_nonconvex"],de),n.variable(t()).define(["two_nonconvex_sets_plot"],me),n.variable(t()).define(["viewof reset_nonconvex"],be),n.variable(t()).define(["viewof projection_name"],he),n.variable(t()).define(["viewof projection_a"],we),n.variable(t()).define(["viewof projection_b"],ge),n.variable(t()).define(["viewof projection_c"],xe),n.variable(t()).define(["viewof projection_gamma"],je),n.variable(t()).define(["htl"],ye);const i=e.module(pe);return n.import("viewof animation_speed",i),n.import("animation_speed",i),n.import("viewof iterate_nonconvex",i),n.import("iterate_nonconvex",i),n.import("viewof reset_nonconvex",i),n.import("reset_nonconvex",i),n.import("two_nonconvex_sets_plot",i),n.import("two_nonconvex_sets_generator",i),n.import("two_nonconvex_sets_reset",i),n.import("viewof projection_name",i),n.import("projection_name",i),n.import("viewof projection_a",i),n.import("projection_a",i),n.import("viewof projection_b",i),n.import("projection_b",i),n.import("viewof projection_c",i),n.import("projection_c",i),n.import("viewof projection_gamma",i),n.import("projection_gamma",i),n.variable(t()).define(["two_nonconvex_sets_generator"],Pe),n.variable(t()).define(["two_nonconvex_sets_reset"],ke),n}n.d(t,{Z:()=>Re})}}]);